---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "bitwarden-sm Provider"
subcategory: ""
description: |-
  Interacts with Bitwarden Secrets Manager.
---

# Terraform Provider -  Bitwarden Secrets Manager

## Usage

### Fetching projects

In order to fetch a list of Projects which are accessible by the configured machine account, the `projects` **data source** should be used.
Its specific documentation and examples can be found here: [`projects.md`](./data-sources/projects.md).

### Listing secrets

In order to fetch a list of secrets which are accessible by the configured machine account, the `list_secrets` **data source** should be used.
This data source only a limited amount of information about listed secrets: `id` and the `key`.
Its specific documentation and examples can be found here: [`list_secrets.md`](./data-sources/list_secrets.md).

### Reading secrets

To read all available information about a specific secret, the `secret` **data source** should be used.
Provided the configured machine accounts has `read` access to the corresponding project, this data sources returns all information and can be used to inject the secret `value` into other terraform objects.
Its specific documentation and examples can be found here: [`secret.md`](./data-sources/secret.md).

### Managing secrets

The `secret` **resource** is the right terraform object to create and manipulate secrets.
It implements the co-ownership of secrets stored in Bitwarden Secrets Manager.
Its specific documentation and examples can be found here: [`secret.md`](./resource/secret.md).

#### Secrets Generator

It is suggested to prevent providing secret `values` in clear text in the terraform configuration.
To improve the usability of the provider, this feature supports the secure generation of a secret `value` if no explicit value has been provided in the terraform configuration.
It uses the secret generator algorithms of the underlying [Bitwarden Go SDK](https://github.com/bitwarden/sdk-go).
The generation of secret `values` can be influenced by a set of parameters.
Specific documentation and examples can be found here: [`secret.md`](./resource/secret.md).

#### Dynamic secrets

This feature supports secret `value` updates in Bitwarden Secrets Manager without requiring manual updates in Terraform configurations.
Provided that no explicit secret `value` has been provided in the terraform configuration, changes to the secret `value` in Bitwarden Secrets Manager will get imported by the provider.
Terraform resources which are consuming the secret will get updated accordingly, following their specific implementations.

### Importing an existing secret into Terraform state

To import an existing secret into the `terraform` state and configuration, the following steps are necessary:

1. Add a secret resource to the `terraform` configuration file:
    ```terraform
    resource "bitwarden-sm_secret" "secret" {}
    ```
2. Get the ID of the secret to be imported from Bitwarden Secrets Manager
3. Execute the following command to import the secret into the `terraform` state:
    ```bash
    $ terraform import "bitwarden-sm_secret.secret" "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"

    bitwarden-sm_secret.secret: Import prepared!
    Prepared bitwarden-sm_secret for import
    bitwarden-sm_secret.secret: Refreshing state... [id=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx]

    Import successful!

    The resources that were imported are shown above. These resources are now in
    your Terraform state and will henceforth be managed by Terraform.
    ```
4. Execute `terraform show` in order to see the imported information. The most important one for the next step is `key`:
    ```bash
   $ terraform show

    # bitwarden-sm_secret.secret:
    resource "bitwarden-sm_secret" "secret" {
      creation_date   = "2024-07-01T00:00:00.000000000Z"
      id              = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
      key             = "Key"
      note            = "Note"
      organization_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
      project_id      = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
      revision_date   = "2024-07-01T00:00:00.000000000Z"
      value           = (sensitive value)
    }
    ```
5. Take the `key` and update the `terraform` configuration file. This is necessary because `key` is the only required configuration value.
    ```terraform
    resource "bitwarden-sm_secret" "secret" {
      key = "Key"
    }
    ```

## Configuration

{{ .SchemaMarkdown | trimspace }}

## Example Provider Configuration
{{ $example := .ExampleFile }}
{{tffile $example }}
